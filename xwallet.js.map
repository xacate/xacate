{"version":3,"file":"xwallet.js","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../src/libs/base/base.js","../src/libs/base/baseType.js","../src/libs/provider/WalletConnectProvider.js","../src/libs/type/walletconnect.js","../src/libs/base/baseMethod.js","../src/libs/type/defaultType.js","../src/libs/type/metamask.js","../src/libs/index.js"],"sourcesContent":["export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import { ethers } from \"ethers\";\r\nexport const parseJsonRpc = async (e) => {\r\n  const data = await ethers.resolveProperties(e);\r\n  if (data.reason) {\r\n    return data.reason;\r\n  }\r\n  if (data.info) {\r\n    return data.info?.error?.message;\r\n  }\r\n  if (data.error) {\r\n    return data.error.message;\r\n  }\r\n  return e.toString();\r\n};\r\n\r\nexport class XBaseWallet {\r\n  _baseProvideMap = {};\r\n  _providerMap = {};\r\n  constructor() {\r\n    this._baseProvideMap = this.initBaseProvider();\r\n    this._providerMap = this.initProvider();\r\n  }\r\n  createBaseProvider(host) {\r\n    return new ethers.JsonRpcProvider(host);\r\n  }\r\n  // init config\r\n  initBaseProvider() {\r\n    return {};\r\n  }\r\n\r\n  initProvider() {\r\n    return {};\r\n  }\r\n\r\n  initMethod() {}\r\n\r\n  // connected wallet name\r\n  set currentName(name) {\r\n    sessionStorage.setItem(\"__WALLET_TYPE__\", name);\r\n  }\r\n\r\n  get currentName() {\r\n    return sessionStorage.getItem(\"__WALLET_TYPE__\") || \"base\";\r\n  }\r\n\r\n  async getCurrentProvider() {\r\n    const provider = await this._providerMap[this.currentName]?.getProvider();\r\n    if (!provider) return null;\r\n    return new ethers.BrowserProvider(provider);\r\n  }\r\n  getCurrentBaseProvider(chainId) {\r\n    return this._baseProvideMap[chainId.toString()];\r\n  }\r\n\r\n  async getWalletName() {\r\n    return await this.getWallet().getWalletName();\r\n  }\r\n\r\n  getWallet() {\r\n    return this._providerMap[this.currentName];\r\n  }\r\n\r\n  async connectWallet(name) {\r\n    this.currentName = name;\r\n    const provider = this.getWallet();\r\n    return provider.connectWallet();\r\n  }\r\n  async disconnect() {\r\n    const provider = this.getWallet();\r\n    sessionStorage.removeItem(\"__WALLET_TYPE__\");\r\n    return provider.disconnect();\r\n  }\r\n\r\n  async getDefaultAccount() {\r\n    const provider = this.getWallet();\r\n    return provider.getDefaultAccount();\r\n  }\r\n  async switchEthereumChain(chainId = \"\") {\r\n    const provider = this.getWallet();\r\n    return provider.switchEthereumChain(chainId);\r\n  }\r\n  async getCurrentChainId() {\r\n    const provider = this.getWallet();\r\n    return provider.getCurrentChainId();\r\n  }\r\n\r\n  async signMessage(message = \"\") {\r\n    return new Promise(async (resolve, reject) => {\r\n      let data = message;\r\n      if (typeof message === \"object\") {\r\n        data = JSON.stringify(message);\r\n      } else if (typeof message !== \"string\") {\r\n        data = message.toString();\r\n      }\r\n      const account = await this.getDefaultAccount();\r\n      if (account === null) return null;\r\n      let timer = null;\r\n      const provider = await this.getCurrentProvider();\r\n      const signer = await provider.getSigner();\r\n      console.log(signer);\r\n      if (this.getWallet().getDisRequestType()) {\r\n        timer = setTimeout(async () => {\r\n          const name = this.getWallet().getName();\r\n          if (this.getWallet().disconnect) {\r\n            await this.getWallet().disconnect();\r\n          }\r\n          try {\r\n            await this.connectWallet(name);\r\n            console.log(\"===>\", this.web3);\r\n            const result = await signer.signMessage(data);\r\n            resolve(result);\r\n          } catch (error) {\r\n            reject(await parseJsonRpc(error));\r\n          }\r\n        }, 30000);\r\n      }\r\n      try {\r\n        const result = await signer.signMessage(data);\r\n        if (timer) {\r\n          clearTimeout(timer);\r\n        }\r\n        resolve(result);\r\n      } catch (e) {\r\n        if (timer) {\r\n          clearTimeout(timer);\r\n        }\r\n        reject(await parseJsonRpc(e));\r\n      }\r\n    });\r\n  }\r\n}\r\n","export class XBaseWalletType {\r\n  constructor() {}\r\n\r\n  getRightChainId() {\r\n    return 0;\r\n  }\r\n  getRightChainName() {\r\n    return \"BSC\";\r\n  }\r\n  getRightChainHost() {\r\n    return \"\";\r\n  }\r\n  getRightChainExplorer() {\r\n    return \"\";\r\n  }\r\n  getRightTokenName() {\r\n    return \"BNB\";\r\n  }\r\n\r\n  getName() {\r\n    return \"baseWallet\";\r\n  }\r\n\r\n  async getWalletName() {\r\n    return Promise.resolve(\"\");\r\n  }\r\n\r\n  getProvider() {\r\n    return Promise.resolve(null);\r\n  }\r\n\r\n  isConnected() {\r\n    return false;\r\n  }\r\n\r\n  async connectWallet() {\r\n    return Promise.resolve(false);\r\n  }\r\n\r\n  getDefaultAccount() {\r\n    return Promise.resolve(null);\r\n  }\r\n\r\n  async disconnect() {\r\n    return true;\r\n  }\r\n\r\n  getDisRequestType() {\r\n    return false;\r\n  }\r\n\r\n  getChainId() {\r\n    return 0;\r\n  }\r\n\r\n  listenAccountChanged(account) {}\r\n  listenChainIdChanged(chainId) {}\r\n}\r\n","import { EthereumProvider } from \"@walletconnect/ethereum-provider\";\r\n\r\nexport default class WalletConnectProvider extends EthereumProvider {\r\n  //   // @ts-ignore\r\n  //   async request(args) {\r\n  //     return await this.signer.request(args, this.formatChainId(97));\r\n  //   }\r\n\r\n  static async init(e) {\r\n    const r = new WalletConnectProvider();\r\n    await r.initialize(e);\r\n    return r;\r\n  }\r\n}\r\n","import { XBaseWalletType } from \"./../base/baseType\";\r\nimport WalletConnectProvider from \"../provider/WalletConnectProvider\";\r\nconst methods = [\r\n  \"personal_sign\",\r\n  \"eth_sendTransaction\",\r\n  \"eth_accounts\",\r\n  \"eth_requestAccounts\",\r\n  \"eth_call\",\r\n  \"eth_getBalance\",\r\n  \"eth_sendRawTransaction\",\r\n  \"eth_sign\",\r\n  \"eth_signTransaction\",\r\n  \"eth_signTypedData\",\r\n  \"eth_signTypedData_v3\",\r\n  \"eth_signTypedData_v4\",\r\n  \"wallet_switchEthereumChain\",\r\n  \"wallet_addEthereumChain\",\r\n  \"wallet_getPermissions\",\r\n  \"wallet_requestPermissions\",\r\n  \"wallet_registerOnboarding\",\r\n  \"wallet_watchAsset\",\r\n  \"wallet_scanQRCode\",\r\n];\r\nexport class XWalletConnect extends XBaseWalletType {\r\n  projectId() {\r\n    return \"682100cca9668c9ff2f41c500b2a4465\";\r\n  }\r\n\r\n  getRpc() {\r\n    const rpc = {\r\n      56: \"https://bsc-dataseed.binance.org/\",\r\n      97: \"https://data-seed-prebsc-1-s1.binance.org:8545/\",\r\n    };\r\n    return rpc;\r\n  }\r\n\r\n  async _createProvider() {\r\n    try {\r\n      const rpc = this.getRpc();\r\n      rpc[this.getRightChainId()] = this.getRightChainHost();\r\n      const provider = await WalletConnectProvider.init({\r\n        projectId: this.projectId(),\r\n        chains: [this.getRightChainId()],\r\n        optionalChains: Object.keys(rpc),\r\n        rpcMap: rpc,\r\n        qrModalOptions: {\r\n          themeMode: \"light\",\r\n        },\r\n        showQrModal: true,\r\n        methods,\r\n      });\r\n      provider.on(\"accountsChanged\", async (accounts) => {\r\n        this.listenAccountChanged(accounts);\r\n      });\r\n      provider.on(\"chainChanged\", (chainId) => {\r\n        this.listenChainIdChanged(chainId);\r\n      });\r\n      provider.on(\"disconnect\", async () => {\r\n        this.listenAccountChanged([]);\r\n        this.listenChainIdChanged(0);\r\n        this._provider = null;\r\n      });\r\n      provider.on(\"message\", () => {\r\n        console.log(\"error\");\r\n      });\r\n      provider.on(\"message\", (message) => {\r\n        console.log(\"message==>\", message);\r\n      });\r\n      provider.on(\"session_event\", (event) => {\r\n        console.log(\"session_event==>\", event);\r\n      });\r\n      provider.on(\"session_update\", (event) => {\r\n        console.log(\"sessiong_update==>\", event);\r\n      });\r\n      return provider;\r\n    } catch (e) {\r\n      localStorage.removeItem(\"wc@2:client:0.3//session\");\r\n      return this._createProvider();\r\n      // return null;\r\n    }\r\n  }\r\n  /**\r\n   * 钱包名称\r\n   **/\r\n  getName() {\r\n    return \"wallectConnect\";\r\n  }\r\n  /**\r\n   * 类型\r\n   **/\r\n  async getWalletName() {\r\n    const provier = await this.getProvider();\r\n    if (!provier.session) return \"unknown wallet\";\r\n    const {\r\n      peer: {\r\n        metadata: { name },\r\n      },\r\n    } = provier.session;\r\n    return name;\r\n  }\r\n  /**\r\n   * 获取代理\r\n   **/\r\n  async getProvider() {\r\n    if (!this._provider) {\r\n      this._provider = await this._createProvider();\r\n    }\r\n    return this._provider;\r\n  }\r\n\r\n  async connectWallet() {\r\n    const provider = await this.getProvider();\r\n    if (!provider) return Promise.resolve(false);\r\n    return new Promise((resolve) => {\r\n      provider\r\n        .enable()\r\n        .then(async (r) => {\r\n          if (Array.isArray(r) && r.length > 0) {\r\n            resolve(true);\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          resolve(false);\r\n        });\r\n    });\r\n  }\r\n\r\n  async getDefaultAccount() {\r\n    const provider = await this.getProvider();\r\n    const session = provider.session;\r\n    if (\r\n      session !== null &&\r\n      Array.isArray(provider.accounts) &&\r\n      provider.accounts.length > 0\r\n    ) {\r\n      return provider.accounts[0];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async getCurrentChainId() {\r\n    const provider = await this.getProvider();\r\n    return provider.chainId.toString();\r\n  }\r\n\r\n  /**\r\n   * 切换网络\r\n   **/\r\n  async switchEthereumChain(chainId) {\r\n    const currentProvider = await this.getProvider();\r\n    if (chainId.toString() === currentProvider.chainId.toString()) {\r\n      return true;\r\n    }\r\n    try {\r\n      await currentProvider.connect({\r\n        chains: [chainId],\r\n      });\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // @ts-ignore\r\n  async disconnect(status) {\r\n    if (status) {\r\n      window.location.reload();\r\n      return true;\r\n    }\r\n    const provider = await this.getProvider();\r\n    for (var key in localStorage) {\r\n      if (key.indexOf(\"wc@2:\") !== -1) {\r\n        localStorage.removeItem(key);\r\n      }\r\n    }\r\n    localStorage.removeItem(\"wc@2:client:0.3//session\");\r\n    this._provider = null;\r\n    // await provider.disconnect();\r\n    return true;\r\n  }\r\n\r\n  listenAccountChanged(accounts) {\r\n    console.log(accounts);\r\n  }\r\n\r\n  listenChainIdChanged(chainId) {\r\n    console.log(chainId);\r\n  }\r\n}\r\n","import { Contract, ethers, parseUnits } from \"ethers\";\r\nimport { parseJsonRpc } from \"./base\";\r\nexport class XBaseWalletMethod {\r\n  _getProvider = () => null;\r\n  _getBaseProvider = () => null;\r\n  constructor(walletClient) {\r\n    this._walletClient = walletClient;\r\n    this._getProvider = walletClient.getCurrentProvider.bind(walletClient);\r\n    this._getBaseProvider =\r\n      walletClient.getCurrentBaseProvider.bind(walletClient);\r\n  }\r\n\r\n  // getRightChainId() {\r\n  //   return \"56\";\r\n  // }\r\n\r\n  getDefaultAccount() {\r\n    return this._walletClient.getDefaultAccount();\r\n  }\r\n\r\n  // getContractAbi() {\r\n  //   return [];\r\n  // }\r\n\r\n  // getContractAddress() {\r\n  //   return \"\";\r\n  // }\r\n\r\n  // contractDataMap() {\r\n  //   return {};\r\n  // }\r\n\r\n  getWallet() {\r\n    return this._walletClient;\r\n  }\r\n\r\n  getBaseContract(name = null, chainId = \"\") {\r\n    chainId = chainId || this.getRightChainId();\r\n    const provider = this._getBaseProvider(chainId);\r\n    if (!name) {\r\n      return new Contract(\r\n        this.getContractAddress(),\r\n        this.getContractAbi(),\r\n        provider\r\n      );\r\n    }\r\n    const map = this.contractDataMap();\r\n    const contractInfo = map[name];\r\n    if (!contractInfo) {\r\n      return null;\r\n    }\r\n    return new Contract(contractInfo.address, contractInfo.abi, provider);\r\n  }\r\n\r\n  async getContract(name = null) {\r\n    const provider = await this._getProvider();\r\n    if (provider) {\r\n      const signer = await provider.getSigner();\r\n      if (!name) {\r\n        return new Contract(\r\n          this.getContractAddress(),\r\n          this.getContractAbi(),\r\n          signer\r\n        );\r\n      }\r\n      const map = this.contractDataMap();\r\n      const contractInfo = map[name];\r\n      if (contractInfo) {\r\n        return new Contract(contractInfo.address, contractInfo.abi, signer);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async transcationGasResult(method, argument = [],loading = null) {\r\n    try {\r\n      loading?.setText(\"estimateGas...\");\r\n      const gasLimit = await method.estimateGas(...argument);\r\n      const feeData = await method._contract.runner.provider.getFeeData();\r\n      const tx = method(...argument, { gasLimit, gasPrice: feeData.gasPrice });\r\n      return this.transcationResult(tx, loading);\r\n    } catch (error) {\r\n      return [false, await parseJsonRpc(error)];\r\n    }\r\n  }\r\n\r\n  transcationResult(method, loading = null) {\r\n    return new Promise(async (resolve) => {\r\n      const timer = setTimeout(() => {\r\n        resolve([false, \"Transaction Timeout\"]);\r\n      }, 30 * 1000);\r\n      try {\r\n        loading?.setText(\r\n          `Please confirm in the wallet(${await this.getWallet().getWalletName()})`\r\n        );\r\n        const tx = await method;\r\n        clearTimeout(timer);\r\n        loading?.setText(\"Please confirm in the block\");\r\n        const result = await tx.wait();\r\n        resolve([true, JSON.stringify(result)]);\r\n      } catch (error) {\r\n        resolve([false, await parseJsonRpc(error)]);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { XBaseWalletType } from \"./../base/baseType\";\r\nimport { ethers } from \"ethers\";\r\n\r\nexport class XDefaultWalletType extends XBaseWalletType {\r\n  _provider = null;\r\n  async getProvider() {\r\n    if (!this._provider) {\r\n      this._provider = new ethers.JsonRpcProvider(this.getRightChainHost());\r\n    }\r\n    return Promise.resolve(this._provider);\r\n  }\r\n\r\n\r\n}\r\n","import { ethers } from \"ethers\";\r\nimport { XBaseWalletType } from \"../base/baseType\";\r\n\r\nexport class XMetaMaskType extends XBaseWalletType {\r\n  constructor() {\r\n    super();\r\n    this._listenWalletStatus();\r\n  }\r\n\r\n  // getRightChainId: () => number\r\n  // getRightChainName: () => string\r\n  // getRightChainHost: () => string\r\n  // getRightChainExplorer: () => string\r\n  // getRightTokenName: () => string\r\n  // listenAccountChanged: (accounts: string[]) => void\r\n  // listenChainIdChanged: (chainId: number) => void\r\n  getChainsInfo(chainId) {\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * 钱包名称\r\n   **/\r\n  getName() {\r\n    return \"metamask plugin\";\r\n  }\r\n\r\n  /**\r\n   * 类型\r\n   **/\r\n  async getWalletName() {\r\n    return Promise.resolve(\"MetaMask Plugins\");\r\n  }\r\n\r\n  /**\r\n   * 获取代理\r\n   **/\r\n  async getProvider() {\r\n    const provider = window && window[\"ethereum\"];\r\n    return Promise.resolve(provider);\r\n  }\r\n\r\n  /**\r\n   * 连接\r\n   **/\r\n  async connectWallet() {\r\n    await this.switchEthereumChain(this.getRightChainId());\r\n    return await this._enable();\r\n  }\r\n  /**\r\n   * 连接账号\r\n   **/\r\n  async getDefaultAccount() {\r\n    const _that = this;\r\n\r\n    async function getProviderAddress() {\r\n      const provider = await _that.getProvider();\r\n      return provider && provider[\"selectedAddress\"];\r\n    }\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n      const account = await getProviderAddress();\r\n      if (account) {\r\n        resolve(account);\r\n        return;\r\n      }\r\n      let interval = null;\r\n      const timer = setTimeout(async function () {\r\n        const account = await getProviderAddress();\r\n        interval && clearInterval(interval);\r\n        clearTimeout(timer);\r\n        resolve(account);\r\n      }, 2000);\r\n      interval = setInterval(async function () {\r\n        const account = await getProviderAddress();\r\n        if (account) {\r\n          clearTimeout(timer);\r\n          clearInterval(interval);\r\n          resolve(account);\r\n        }\r\n      }, 10);\r\n    });\r\n  }\r\n  /**\r\n   * chaindId\r\n   **/\r\n  async getCurrentChainId() {\r\n    const provider = await this.getProvider();\r\n    let chainId = provider && provider.chainId;\r\n    if (ethers.isHexString(chainId)) {\r\n      chainId = Number(chainId);\r\n    }\r\n    return chainId;\r\n  }\r\n\r\n  /**\r\n   * 切换网络\r\n   **/\r\n  async switchEthereumChain(chainId) {\r\n    chainId = chainId || this.getRightChainId();\r\n    const _that = this;\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const provider = await this.getProvider();\r\n        if (provider === null || provider === undefined) {\r\n          return;\r\n        }\r\n        const toChainId = \"0x\" + Number(chainId).toString(16);\r\n        await provider.request({\r\n          method: \"wallet_switchEthereumChain\",\r\n          params: [\r\n            {\r\n              chainId: toChainId,\r\n            },\r\n          ],\r\n        });\r\n        if (!status) {\r\n          setTimeout(function () {\r\n            _that._enable().then(resolve);\r\n          }, 2000);\r\n        } else {\r\n          resolve(true);\r\n        }\r\n      } catch (e) {\r\n        if (e.code === 4902) {\r\n          try {\r\n            const isFlag = await _that._addEthereumChainParameter(chainId);\r\n            if (!isFlag) {\r\n              resolve(isFlag);\r\n            }\r\n            setTimeout(function () {\r\n              _that._enable().then(resolve);\r\n            }, 2000);\r\n            return;\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        }\r\n        resolve(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 添加网络\r\n   **/\r\n  async _addEthereumChainParameter(chainId) {\r\n    try {\r\n      chainId = chainId || this.getRightChainId();\r\n      const provider = await this.getProvider();\r\n      if (provider === null || provider === undefined) {\r\n        return;\r\n      }\r\n      const configInfo = this.getChainsInfo(chainId);\r\n      await provider.request({\r\n        method: \"wallet_addEthereumChain\",\r\n        params: [\r\n          {\r\n            chainId: \"0x\" + Number(configInfo.chainId).toString(16),\r\n            chainName: configInfo.chainName,\r\n            rpcUrls: [configInfo.rpcUrl],\r\n            blockExplorerUrls: configInfo.explorer\r\n              ? [configInfo.explorer]\r\n              : null,\r\n            nativeCurrency: {\r\n              name: configInfo.token || \"ETH\",\r\n              symbol: configInfo.token || \"ETH\",\r\n              decimals: configInfo.decimals || 18,\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      return true;\r\n    } catch (e) {\r\n      console.log(e);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 断开\r\n   **/\r\n  disconnect() {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 监听\r\n   **/\r\n  async _listenWalletStatus() {\r\n    const provider = await this.getProvider();\r\n    if (provider === null || provider === undefined) {\r\n      return;\r\n    }\r\n    provider.on(\"accountsChanged\", (accounts) => {\r\n      this.listenAccountChanged(accounts);\r\n    });\r\n    provider.on(\"chainChanged\", (chainId) => {\r\n      this.listenChainIdChanged(chainId);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 请求连接操作\r\n   **/\r\n  async _enable() {\r\n    const provider = await this.getProvider();\r\n    if (provider === null || provider === undefined) {\r\n      return false;\r\n    }\r\n    try {\r\n      await provider.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { ethers } from \"ethers\";\r\nexport { XBaseWallet, parseJsonRpc } from \"./base/base\";\r\nexport { XBaseWalletType } from \"./base/baseType.js\";\r\n\r\nexport { XDefaultWalletType } from \"./type/defaultType.js\";\r\n\r\nexport { XMetaMaskType } from \"./type/metamask.js\";\r\n\r\nexport { XWalletConnect } from \"./type/walletconnect.js\";\r\n\r\nexport { XBaseWalletMethod } from \"./base/baseMethod.js\";\r\n\r\nexport const isAddress = (value) => {\r\n  return ethers.isAddress(value);\r\n};\r\n"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_toPropertyKey","arg","key","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_defineProperty","value","toPropertyKey","Object","defineProperty","enumerable","configurable","writable","parseJsonRpc","async","data","ethers","resolveProperties","e","reason","info","error","message","toString","XBaseWalletType","getRightChainId","getRightChainName","getRightChainHost","getRightChainExplorer","getRightTokenName","getName","Promise","resolve","getProvider","isConnected","getDefaultAccount","getDisRequestType","getChainId","listenAccountChanged","account","listenChainIdChanged","chainId","WalletConnectProvider","EthereumProvider","static","r","initialize","methods","this","_baseProvideMap","initBaseProvider","_providerMap","initProvider","createBaseProvider","host","JsonRpcProvider","initMethod","currentName","name","sessionStorage","setItem","getItem","provider","BrowserProvider","getCurrentBaseProvider","getWallet","getWalletName","connectWallet","removeItem","disconnect","switchEthereumChain","getCurrentChainId","reject","JSON","stringify","timer","getCurrentProvider","signer","getSigner","setTimeout","result","signMessage","clearTimeout","walletClient","_walletClient","_getProvider","bind","_getBaseProvider","getBaseContract","Contract","getContractAddress","getContractAbi","contractInfo","contractDataMap","address","abi","method","argument","loading","setText","gasLimit","estimateGas","feeData","_contract","runner","getFeeData","tx","gasPrice","transcationResult","wait","args","super","_provider","_listenWalletStatus","getChainsInfo","window","_enable","_that","getProviderAddress","interval","clearInterval","setInterval","isHexString","toChainId","request","params","status","then","code","isFlag","_addEthereumChainParameter","configInfo","chainName","rpcUrls","rpcUrl","blockExplorerUrls","explorer","nativeCurrency","token","symbol","decimals","on","accounts","projectId","getRpc","rpc","init","chains","optionalChains","keys","rpcMap","qrModalOptions","themeMode","showQrModal","event","localStorage","_createProvider","provier","session","peer","metadata","enable","Array","isArray","length","catch","currentProvider","connect","location","reload","indexOf","isAddress"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}